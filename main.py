import asyncio
from src.telegram_client import TelegramAnalyzer
from src.message_analyzer import MessageProcessor
from config.settings import TELEGRAM_API_ID, TELEGRAM_API_HASH, TELEGRAM_PHONE
from src.database import Database
import json
from datetime import datetime, timedelta

def print_chat_history(recent_chats):
    if not recent_chats:
        print("–Ü—Å—Ç–æ—Ä—ñ—è —á–∞—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—è.")
        return

    print("–Ü—Å—Ç–æ—Ä—ñ—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —á–∞—Ç—ñ–≤:")
    for chat in recent_chats:
        print(f"–ß–∞—Ç: {chat['name']} (ID: {chat['id']})")

def print_messages(messages):
    if not messages:
        print("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
        return

    print("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:")
    for message in messages:
        date = message.date.strftime('%Y-%m-%d %H:%M:%S')
        sender = "–ú–µ–Ω–µ–¥–∂–µ—Ä" if message.from_me else "–ö–ª—ñ—î–Ω—Ç"
        print(f"{date} - {sender}: {message.text}")

def print_conversation_analysis(conversation):
    """–í–∏–≤–µ–¥–µ–Ω–Ω—è –±–∞–∑–æ–≤–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–æ–∑–º–æ–≤–∏"""
    print(f"\nüìä –ê–Ω–∞–ª—ñ–∑ —Ä–æ–∑–º–æ–≤–∏:")
    print(f"   –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {conversation.total_messages}")
    print(f"   –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {conversation.manager_messages}")
    print(f"   –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞: {conversation.client_messages}")
    print(f"   –ü–µ—Ä—ñ–æ–¥ —Ä–æ–∑–º–æ–≤–∏: {conversation.start_date.strftime('%Y-%m-%d')} - {conversation.end_date.strftime('%Y-%m-%d')}")
    
    if conversation.total_messages > 0:
        manager_ratio = (conversation.manager_messages / conversation.total_messages) * 100
        print(f"   –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {manager_ratio:.1f}%")

def print_potential_promises(potential_promises):
    """–í–∏–≤–µ–¥–µ–Ω–Ω—è –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö –æ–±—ñ—Ü—è–Ω–æ–∫"""
    if not potential_promises:
        print("‚úÖ –ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö –æ–±—ñ—Ü—è–Ω–æ–∫ –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ.")
        return
    
    print(f"\n‚ö†Ô∏è –í–∏—è–≤–ª–µ–Ω–æ {len(potential_promises)} –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö –æ–±—ñ—Ü—è–Ω–æ–∫:")
    
    for i, promise in enumerate(potential_promises, 1):
        print(f"\nüî∏ –û–±—ñ—Ü—è–Ω–∫–∞ #{i} (–°–∫–æ—Ä: {promise['total_score']}):")
        print(f"   üìÖ –î–∞—Ç–∞: {promise['message'].date.strftime('%Y-%m-%d %H:%M')}")
        print(f"   üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {promise['message'].text[:100]}...")
        
        if promise['extracted_promises']:
            print(f"   üìã –ó–Ω–∞–π–¥–µ–Ω–æ –æ–±—ñ—Ü—è–Ω–∫–∏:")
            for p in promise['extracted_promises']:
                print(f"      - {p}")
        
        if promise['extracted_times']:
            print(f"   ‚è∞ –ß–∞—Å–æ–≤—ñ –∑–≥–∞–¥–∫–∏:")
            for t in promise['extracted_times']:
                print(f"      - {t['keyword']}: {t['context']}")

def print_message_groups(message_groups):
    """–í–∏–≤–µ–¥–µ–Ω–Ω—è –≥—Ä—É–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    if not message_groups:
        return
    
    print(f"\nüì± –†–æ–∑–º–æ–≤–∞ —Ä–æ–∑–¥—ñ–ª–µ–Ω–∞ –Ω–∞ {len(message_groups)} –±–ª–æ–∫—ñ–≤:")
    
    for i, group in enumerate(message_groups, 1):
        duration = group['duration_minutes']
        print(f"   –ë–ª–æ–∫ #{i}: {group['start_time'].strftime('%H:%M')} - {group['end_time'].strftime('%H:%M')} "
              f"({duration:.0f} —Ö–≤, {group['total_messages']} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å)")

def check_promise_fulfillment(potential_promises, conversation):
    """–ü—Ä–æ—Å—Ç–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–±—ñ—Ü—è–Ω–æ–∫"""
    unfulfilled_promises = []
    
    for promise_data in potential_promises:
        promise_msg = promise_data['message']
        promise_time = promise_msg.date
        
        # –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ —â–æ –º–æ–∂—É—Ç—å –≤–∫–∞–∑—É–≤–∞—Ç–∏ –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        fulfillment_keywords = [
            '–Ω–∞–¥—ñ—Å–ª–∞–≤', '–≤—ñ–¥–ø—Ä–∞–≤–∏–≤', '—Å–∫–∏–Ω—É–≤', '–≥–æ—Ç–æ–≤–æ', '–∑—Ä–æ–±–ª–µ–Ω–æ',
            '–≤–∏–∫–æ–Ω–∞–Ω–æ', '–ø—Ä–∏–∫—Ä—ñ–ø–∏–≤', '–æ—Å—å', '—Ç—Ä–∏–º–∞–π', '–¥–∏–≤–∏—Å—å'
        ]
        
        # –®—É–∫–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –æ–±—ñ—Ü—è–Ω–∫–∏ —â–æ –º–æ–∂—É—Ç—å –≤–∫–∞–∑—É–≤–∞—Ç–∏ –Ω–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        fulfilled = False
        for msg in conversation.messages:
            if (msg.from_me and 
                msg.date > promise_time and 
                (msg.date - promise_time).days <= 7):  # –í –º–µ–∂–∞—Ö —Ç–∏–∂–Ω—è
                
                msg_lower = msg.text.lower()
                if any(keyword in msg_lower for keyword in fulfillment_keywords):
                    fulfilled = True
                    break
        
        if not fulfilled:
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø—Ä–∏–±–ª–∏–∑–Ω–∏–π —Ç–µ—Ä–º—ñ–Ω –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–µ–∫—Å—Ç—É –æ–±—ñ—Ü—è–Ω–∫–∏
            deadline = estimate_deadline(promise_msg.text, promise_time)
            
            unfulfilled_promises.append({
                'message': promise_msg,
                'extracted_promises': promise_data['extracted_promises'],
                'estimated_deadline': deadline,
                'days_overdue': (datetime.now() - deadline).days if deadline < datetime.now() else 0,
                'total_score': promise_data['total_score']
            })
    
    return unfulfilled_promises

def estimate_deadline(promise_text, promise_date):
    """–û—Ü—ñ–Ω–∫–∞ —Ç–µ—Ä–º—ñ–Ω—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–±—ñ—Ü—è–Ω–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–µ–∫—Å—Ç—É"""
    text_lower = promise_text.lower()
    
    # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ç–µ—Ä–º—ñ–Ω–∏
    if any(word in text_lower for word in ['—Å—å–æ–≥–æ–¥–Ω—ñ', '–¥–æ –∫—ñ–Ω—Ü—è –¥–Ω—è']):
        return promise_date.replace(hour=18, minute=0, second=0)
    elif '–∑–∞–≤—Ç—Ä–∞' in text_lower:
        return promise_date + timedelta(days=1)
    elif any(word in text_lower for word in ['–¥–æ –ø\'—è—Ç–Ω–∏—Ü—ñ', '–¥–æ –∫—ñ–Ω—Ü—è —Ç–∏–∂–Ω—è']):
        days_to_friday = (4 - promise_date.weekday()) % 7
        return promise_date + timedelta(days=days_to_friday)
    elif '–Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–∏–∂–Ω—è' in text_lower:
        return promise_date + timedelta(days=7)
    elif any(word in text_lower for word in ['—á–µ—Ä–µ–∑ –≥–æ–¥–∏–Ω—É', '–∑–∞ –≥–æ–¥–∏–Ω—É']):
        return promise_date + timedelta(hours=1)
    elif '—á–µ—Ä–µ–∑ –¥–µ–Ω—å' in text_lower:
        return promise_date + timedelta(days=1)
    else:
        # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - 3 –¥–Ω—ñ
        return promise_date + timedelta(days=3)

def print_unfulfilled_promises(unfulfilled_promises, chat_name):
    """–í–∏–≤–µ–¥–µ–Ω–Ω—è –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –æ–±—ñ—Ü—è–Ω–æ–∫"""
    if not unfulfilled_promises:
        print(f"‚úÖ –£ —á–∞—Ç—ñ –∑ {chat_name}: –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –æ–±—ñ—Ü—è–Ω–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    print(f"\n‚ö†Ô∏è –£ —á–∞—Ç—ñ –∑ {chat_name} –∑–Ω–∞–π–¥–µ–Ω–æ {len(unfulfilled_promises)} –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –æ–±—ñ—Ü—è–Ω–æ–∫:")
    
    for i, promise in enumerate(unfulfilled_promises, 1):
        print(f"\nüî∏ –ù–µ–≤–∏–∫–æ–Ω–∞–Ω–∞ –æ–±—ñ—Ü—è–Ω–∫–∞ #{i}:")
        print(f"   üìÖ –î–∞—Ç–∞ –æ–±—ñ—Ü—è–Ω–∫–∏: {promise['message'].date.strftime('%Y-%m-%d %H:%M')}")
        print(f"   ‚è∞ –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ç–µ—Ä–º—ñ–Ω: {promise['estimated_deadline'].strftime('%Y-%m-%d %H:%M')}")
        
        if promise['days_overdue'] > 0:
            print(f"   üö® –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ –Ω–∞ {promise['days_overdue']} –¥–Ω—ñ–≤")
        
        print(f"   üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {promise['message'].text}")
        
        if promise['extracted_promises']:
            print(f"   üìã –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –æ–±—ñ—Ü—è–Ω–∫–∏:")
            for p in promise['extracted_promises']:
                print(f"      - {p}")

async def main():
    telegram = TelegramAnalyzer(TELEGRAM_API_ID, TELEGRAM_API_HASH, TELEGRAM_PHONE)
    db = Database()
    message_processor = MessageProcessor()
    
    all_unfulfilled_promises = []
    
    try:
        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Telegram
        await telegram.connect()
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —á–∞—Ç—ñ–≤
        print("–û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —á–∞—Ç—ñ–≤...")
        recent_chats = await telegram.get_recent_chats(limit=5)
        print_chat_history(recent_chats)

        for chat in recent_chats:
            print(f"\n{'='*60}")
            print(f"üîç –ê–Ω–∞–ª—ñ–∑ —á–∞—Ç—É –∑ {chat['name']}...")
            print(f"{'='*60}")

            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞ —Ç–∏–∂–¥–µ–Ω—å
            raw_messages = await telegram.get_chat_history(chat['id'], days_back=7)
            
            if not raw_messages:
                print("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ —É —Ü—å–æ–º—É —á–∞—Ç—ñ.")
                continue
            
            # –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —á–µ—Ä–µ–∑ MessageProcessor
            conversation = message_processor.process_messages(raw_messages)
            conversation.chat_name = chat['name']
            
            # –í–∏–≤–µ–¥–µ–Ω–Ω—è –±–∞–∑–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
            print(f"üì• –û—Ç—Ä–∏–º–∞–Ω–æ {len(raw_messages)} —Å–∏—Ä–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
            print(f"‚úÖ –ü—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∑–∞–ª–∏—à–∏–ª–æ—Å—å {conversation.total_messages} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
            
            if conversation.total_messages == 0:
                print("–ü—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –Ω–µ –∑–∞–ª–∏—à–∏–ª–æ—Å—å.")
                continue
            
            # –ê–Ω–∞–ª—ñ–∑ —Ä–æ–∑–º–æ–≤–∏
            print_conversation_analysis(conversation)
            
            # –ü–æ—à—É–∫ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö –æ–±—ñ—Ü—è–Ω–æ–∫
            potential_promises = message_processor.find_potential_promises(conversation)
            print_potential_promises(potential_promises)
            
            # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            message_groups = message_processor.group_messages_by_context(conversation)
            print_message_groups(message_groups)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–±—ñ—Ü—è–Ω–æ–∫
            unfulfilled = check_promise_fulfillment(potential_promises, conversation)
            print_unfulfilled_promises(unfulfilled, chat['name'])
            
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
            try:
                db.save_analysis(chat['id'], chat['name'])
                
                # –õ–æ–≥—É–≤–∞–Ω–Ω—è
                with open("logs/logs.txt", "a", encoding="utf-8") as log_file:
                    log_file.write(f"–ß–∞—Ç: {chat['name']} (ID: {chat['id']}) - "
                                 f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {conversation.total_messages}, "
                                 f"–ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö –æ–±—ñ—Ü—è–Ω–æ–∫: {len(potential_promises)}, "
                                 f"–ù–µ–≤–∏–∫–æ–Ω–∞–Ω–∏—Ö: {len(unfulfilled)}\n")
            
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î: {e}")
            
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
            if unfulfilled:
                all_unfulfilled_promises.extend([{
                    'chat_name': chat['name'],
                    'chat_id': chat['id'],
                    'promises': unfulfilled
                }])

        # –ü—ñ–¥—Å—É–º–∫–æ–≤–∏–π –∑–≤—ñ—Ç
        print_final_report(all_unfulfilled_promises)

    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()

    finally:
        await telegram.client.disconnect()

def print_final_report(all_unfulfilled_promises):
    """–í–∏–≤–µ–¥–µ–Ω–Ω—è –ø—ñ–¥—Å—É–º–∫–æ–≤–æ–≥–æ –∑–≤—ñ—Ç—É"""
    print(f"\n{'='*80}")
    print("üìä –ü–Ü–î–°–£–ú–ö–û–í–ò–ô –ó–í–Ü–¢")
    print(f"{'='*80}")
    
    if not all_unfulfilled_promises:
        print("üéâ –ß—É–¥–æ–≤—ñ –Ω–æ–≤–∏–Ω–∏! –ù–µ–≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –æ–±—ñ—Ü—è–Ω–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∂–æ–¥–Ω–æ–º—É —á–∞—Ç—ñ!")
        return
    
    total_unfulfilled = sum(len(chat['promises']) for chat in all_unfulfilled_promises)
    
    print(f"‚ö†Ô∏è  –ó–∞–≥–∞–ª–æ–º –∑–Ω–∞–π–¥–µ–Ω–æ {total_unfulfilled} –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –æ–±—ñ—Ü—è–Ω–æ–∫ —É {len(all_unfulfilled_promises)} —á–∞—Ç–∞—Ö:")
    
    for chat_data in all_unfulfilled_promises:
        print(f"\nüî∏ {chat_data['chat_name']}: {len(chat_data['promises'])} –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –æ–±—ñ—Ü—è–Ω–æ–∫")
        
        # –ù–∞–π–∫—Ä–∏—Ç–∏—á–Ω—ñ—à—ñ (–Ω–∞–π–±—ñ–ª—å—à –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ)
        overdue_promises = [p for p in chat_data['promises'] if p['days_overdue'] > 0]
        if overdue_promises:
            max_overdue = max(overdue_promises, key=lambda x: x['days_overdue'])
            print(f"   üö® –ù–∞–π–±—ñ–ª—å—à–µ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ: {max_overdue['days_overdue']} –¥–Ω—ñ–≤")
    
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
    print("1. –ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –æ–±—ñ—Ü—è–Ω–æ–∫")
    print("2. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –º–∞–π–±—É—Ç–Ω—ñ—Ö –æ–±—ñ—Ü—è–Ω–æ–∫")
    print("3. –†–æ–∑–≥–ª—è–Ω—å—Ç–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –ø—Ä–æ—Ü–µ—Å—ñ–≤")

if __name__ == "__main__":
    asyncio.run(main())