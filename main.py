import asyncio
from src.ai_analyzer import AiAnalizer
from config.settings import TELEGRAM_API_ID, TELEGRAM_API_HASH, TELEGRAM_PHONE, API_KEY
from src.telegram_client import TelegramAnalyzer
from src.message_analyzer import MessageProcessor
from src.database import Database
from datetime import datetime, timedelta

def print_chat_history(recent_chats):
    if not recent_chats:
        print("–Ü—Å—Ç–æ—Ä—ñ—è —á–∞—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—è.")
        return

    print("–Ü—Å—Ç–æ—Ä—ñ—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —á–∞—Ç—ñ–≤:")
    for chat in recent_chats:
        print(f"–ß–∞—Ç: {chat['name']} (ID: {chat['id']})")

def print_messages(messages):
    if not messages:
        print("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
        return

    print("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:")
    for message in messages:
        date = message['date'].strftime('%Y-%m-%d %H:%M:%S')
        sender = "–ú–µ–Ω–µ–¥–∂–µ—Ä" if message['from_me'] else "–ö–ª—ñ—î–Ω—Ç"
        print(f"{date} - {sender}: {message['text']}")

def print_conversation_analysis(conversation):
    """–í–∏–≤–µ–¥–µ–Ω–Ω—è –±–∞–∑–æ–≤–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–æ–∑–º–æ–≤–∏"""
    print(f"\nüìä –ê–Ω–∞–ª—ñ–∑ —Ä–æ–∑–º–æ–≤–∏:")
    print(f"   –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {conversation.total_messages}")
    print(f"   –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {conversation.manager_messages}")
    print(f"   –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞: {conversation.client_messages}")
    print(f"   –ü–µ—Ä—ñ–æ–¥ —Ä–æ–∑–º–æ–≤–∏: {conversation.start_date.strftime('%Y-%m-%d')} - {conversation.end_date.strftime('%Y-%m-%d')}")
    
    if conversation.total_messages > 0:
        manager_ratio = (conversation.manager_messages / conversation.total_messages) * 100
        print(f"   –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {manager_ratio:.1f}%")

def print_ai_analysis(ai_result):
    """–í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∞–Ω–∞–ª—ñ–∑—É AI"""
    if not ai_result:
        print("AI –∞–Ω–∞–ª—ñ–∑ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.")
        return
    
    print("\n=== AI –ê–Ω–∞–ª—ñ–∑ —Ä–æ–∑–º–æ–≤–∏ ===")
    print(f"–í–∏—è–≤–ª–µ–Ω–æ –æ–±—ñ—Ü—è–Ω–∫–∏: {ai_result.get('promises_found')}")
    print(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –æ–±—ñ—Ü—è–Ω–æ–∫: {ai_result.get('unfulfilled_count')}")
    print(f"–í–∏—Å–Ω–æ–≤–æ–∫: {ai_result.get('analysis_summary')}")
    
    if ai_result.get('promises'):
        print("\n–û–±—ñ—Ü—è–Ω–∫–∏:")
        for p in ai_result['promises']:
            print(f"- {p.get('promise_text')} | –¢–µ—Ä–º—ñ–Ω: {p.get('deadline')} | –í–∏–∫–æ–Ω–∞–Ω–æ: {p.get('fulfilled')} | –ü—Ä–∏—á–∏–Ω–∞: {p.get('reason')}")

async def main():
    telegram = TelegramAnalyzer(TELEGRAM_API_ID, TELEGRAM_API_HASH, TELEGRAM_PHONE)
    ai_analyzer = AiAnalizer(API_KEY)
    db = Database()
    processor = MessageProcessor()

    await telegram.connect()
    recent_chats = await telegram.get_recent_chats(limit=3)
    print_chat_history(recent_chats)

    for chat in recent_chats:
        print(f"\n--- –ê–Ω–∞–ª—ñ–∑ —á–∞—Ç—É: {chat['name']} (ID: {chat['id']}) ---")
        messages = await telegram.get_chat_history(chat['id'], days_back=1)
        if not messages:
            print("–ù–µ–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.")
            continue

        print_messages(messages)

        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è AI —á–µ—Ä–µ–∑ MessageProcessor
        conversation = processor.process_messages(messages)
        conversation.chat_name = chat['name']
        print_conversation_analysis(conversation)

        # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è AI (—è–∫ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤)
        messages_for_ai = []
        for msg in conversation.messages:
            messages_for_ai.append({
                "from_me": msg.from_me,
                "date": msg.date,
                "text": msg.text
            })

        # AI –∞–Ω–∞–ª—ñ–∑ —Ä–æ–∑–º–æ–≤–∏
        try:
            ai_result = ai_analyzer.analyze_conversation(messages_for_ai)
            if not isinstance(ai_result, dict):
                print("AI –∞–Ω–∞–ª—ñ–∑ –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
                ai_result = None
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ AI –∞–Ω–∞–ª—ñ–∑—É: {e}")
            ai_result = None

        print_ai_analysis(ai_result)

        # –ó–∞–ø–∏—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É AI –∞–Ω–∞–ª—ñ–∑—É –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        if ai_result:
            db.save_analysis(
                chat_id=chat['id'],
                chat_name=chat['name'],
                analysis_result=str(ai_result),
                unfulfilled_count=ai_result.get('unfulfilled_count', 0)
            )

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())